<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Leagend" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="mapbox-token" content="<%= Rails.application.credentials.dig(:mapbox, :public_token) %>">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload", media: "all" %>
    <%= javascript_importmap_tags %>
    
    <%# Assets de Mapbox - previene duplicados %>
    <%= render 'shared/mapbox_assets' %>

    <%# Variables JavaScript para el usuario logueado %>
    <% if user_signed_in? %>
      <script nonce="<%= content_security_policy_nonce %>">
        window.LEAGEND_USER_SIGNED_IN = true;
        window.LEAGEND_USER_HAS_COUNTRY = <%= current_user.current_country.present? %>;
        window.LEAGEND_USER_HAS_CITY = <%= current_user.current_city.present? %>;
        window.LEAGEND_USER_LAT = <%= current_user.current_latitude.present? ? current_user.current_latitude : 'null' %>;
        window.LEAGEND_USER_LNG = <%= current_user.current_longitude.present? ? current_user.current_longitude : 'null' %>;
      </script>
    <% else %>
      <script nonce="<%= content_security_policy_nonce %>">
        window.LEAGEND_USER_SIGNED_IN = false;
        window.LEAGEND_USER_HAS_COUNTRY = false;
        window.LEAGEND_USER_HAS_CITY = false;
        window.LEAGEND_USER_LAT = null;
        window.LEAGEND_USER_LNG = null;
      </script>
    <% end %>

    <%# CSS de Flatpickr %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!--bahamon.dev-->
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  </head>

  <body data-controller="modal location-display">
    <!-- Bloque de información de ubicación -->
    <div class="location-info-bar" data-location-display-target="display">
      <div class="container-fluid">
        <div class="row">
          <div class="col-12">
            <small class="text-muted">
              <i class="fas fa-map-marker-alt me-1"></i>
              <span id="leagend-header-location"
                    data-country="<%= current_user&.current_country %>"
                    data-city="<%= current_user&.current_city %>"
                    data-lat="<%= current_user&.current_latitude %>"
                    data-lng="<%= current_user&.current_longitude %>">
                <% location = current_user_location %>
                <% if has_location_data?(location) %>
                  Ubicación: <%= format_location_display(location) %>
                <% else %>
                  <em>Detectando ubicación...</em>
                <% end %>
              </span>
              
              <%# Script de fallback para localStorage (mejora UX inicial) %>
              <% if user_signed_in? && current_user.current_city.blank? && current_user.current_country.blank? %>
                <script nonce="<%= content_security_policy_nonce %>">
                  (function() {
                    // Fallback inmediato desde localStorage si existe
                    const city = localStorage.getItem('leagend.city');
                    const country = localStorage.getItem('leagend.country');
                    
                    if (city && country) {
                      const locationSpan = document.getElementById('leagend-header-location');
                      if (locationSpan) {
                        locationSpan.innerHTML = `Ubicación: ${city}, ${country}`;
                      }
                    }
                  })();
                </script>
              <% end %>
            </small>
          </div>
        </div>
      </div>
    </div>

    <nav class="navbar navbar-expand-lg bg-body-tertiary">
      <div class="container-fluid">
        <%= link_to 'Leagend', root_path, class: 'navbar-brand' %>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarText">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <%= link_to 'Inicio', root_path, class: 'nav-link' %>
            </li>
            <li class="nav-item">
              <%= link_to 'Clubs', clubs_path, class: 'nav-link' %>
            </li>
            <li class="nav-item">
              <%= link_to 'Clans', clans_path, class: 'nav-link' %>
            </li>
            <li class="nav-item">
              <%= link_to "Discover duels", open_duels_path, class: "nav-link" %>
            </li>
            <li class="nav-item">
              <%= link_to "Arenas", arenas_path, class: "nav-link" %>
            </li>
          </ul>

          <ul class="navbar-nav mb-2 mb-lg-0">
            <% if user_signed_in? %>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <% if current_user.avatar.attached? %>
                    <%= image_tag current_user.avatar, class: "rounded-circle me-2", alt: "Avatar", size: "30x30" %>
                  <% end %>
                  <%= current_user.firstname.presence || current_user.email %>
                </a>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                  <li><%= link_to 'Nuevo evento', when_duels_path, class: 'dropdown-item' %></li>
                  <li><%= link_to "Mis Duelos", my_duels_duels_path, class: "dropdown-item" %></li>
                  <li><%= link_to 'Mi perfil', user_path(current_user), class: 'dropdown-item' %></li>
                  <li><%= link_to 'Notificaciones', notifications_path, class: 'dropdown-item' %></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><%= link_to 'Cerrar sesión', destroy_user_session_path, method: :delete, class: 'dropdown-item text-danger' %></li>
                </ul>
              </li>
            <% else %>
              <li class="nav-item">
                <%= link_to 'Iniciar sesión', new_user_session_path, class: 'nav-link' %>
              </li>
              <li class="nav-item">
                <%= link_to 'Registrarse', new_user_registration_path, class: 'nav-link' %>
              </li>
            <% end %>
          </ul>
        </div>
      </div>
    </nav>


    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
    
    <!-- Widget de ubicación opcional -->
    <div class="container-fluid">
      <div class="row justify-content-end">
        <div class="col-md-3 col-lg-2">
          <%= render 'shared/location_widget' %>
        </div>
      </div>
    </div>
    
    <%= yield %>

    <!--bahamon.dev-->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
      
      <!-- Script de reverse geocoding para usuarios logueados -->
      <script nonce="<%= content_security_policy_nonce %>">
        (function() {
          // Solo ejecutar si el usuario está logueado
          if (!window.LEAGEND_USER_SIGNED_IN) {
            return;
          }
          
          // Esperar a que el DOM esté listo
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initReverseGeocoding);
          } else {
            initReverseGeocoding();
          }
          
          function initReverseGeocoding() {
            // Buscar el contenedor de ubicación con timeout
            let locationContainer = null;
            let attempts = 0;
            const maxAttempts = 20; // 2 segundos máximo
            
            const findContainer = () => {
              locationContainer = document.getElementById('leagend-header-location');
              if (locationContainer) {
                startReverseGeocoding();
                return;
              }
              
              attempts++;
              if (attempts < maxAttempts) {
                setTimeout(findContainer, 100);
              } else {
                console.debug('[leagend-geo] Header no encontrado después de 2s, abortando');
              }
            };
            
            findContainer();
            
            function startReverseGeocoding() {
              // Verificar si ya se procesó
              if (sessionStorage.getItem('leagend.geo_revgeo_done')) {
                return;
              }
              
              // Verificar si ya tiene ciudad y país desde data-attributes
              const hasCity = locationContainer.dataset.city && locationContainer.dataset.city.trim() !== '';
              const hasCountry = locationContainer.dataset.country && locationContainer.dataset.country.trim() !== '';
              
              if (hasCity && hasCountry) {
                console.debug('[leagend-geo] Usuario ya tiene ciudad y país configurados');
                return;
              }
              
              // Obtener coordenadas en orden de prioridad
              let userLat = null;
              let userLng = null;
              
              // 1. data-lat/lng del span
              if (locationContainer.dataset.lat && locationContainer.dataset.lng) {
                userLat = parseFloat(locationContainer.dataset.lat);
                userLng = parseFloat(locationContainer.dataset.lng);
              }
              
              // 2. window.LEAGEND_USER_LAT/LNG
              if (!userLat || !userLng || !isFinite(userLat) || !isFinite(userLng)) {
                userLat = parseFloat(window.LEAGEND_USER_LAT);
                userLng = parseFloat(window.LEAGEND_USER_LNG);
              }
              
              // 3. localStorage
              if (!userLat || !userLng || !isFinite(userLat) || !isFinite(userLng)) {
                userLat = parseFloat(localStorage.getItem('leagend.lat'));
                userLng = parseFloat(localStorage.getItem('leagend.lng'));
              }
              
              // Validar coordenadas
              if (!userLat || !userLng || !isFinite(userLat) || !isFinite(userLng)) {
                console.debug('[leagend-geo] No hay coordenadas válidas disponibles');
                return;
              }
              
              console.debug('[leagend-geo] Coordenadas encontradas:', { lat: userLat, lng: userLng });
              
              // Obtener token de Mapbox
              const mapboxToken = document.querySelector('meta[name="mapbox-token"]')?.content;
              if (!mapboxToken) {
                console.debug('[leagend-geo] Token de Mapbox no encontrado');
                return;
              }
              
              // Marcar como iniciado para evitar duplicados
              sessionStorage.setItem('leagend.geo_revgeo_done', 'true');
              
              // Hacer reverse geocoding con timeout
              const controller = new AbortController();
              const timeoutId = setTimeout(() => controller.abort(), 2500);
              
              fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${userLng},${userLat}.json?types=place,region,country&language=es&access_token=${mapboxToken}`, {
                signal: controller.signal
              })
              .then(response => {
                clearTimeout(timeoutId);
                if (!response.ok) throw new Error('Mapbox API error');
                return response.json();
              })
              .then(data => {
                if (!data.features || data.features.length === 0) {
                  throw new Error('No features found');
                }
                
                // Extraer city y country robustamente
                let city = null;
                let country = null;
                let countryCode = null;
                
                for (const feature of data.features) {
                  if (feature.place_type.includes('place') && !city) {
                    city = feature.text;
                  }
                  if (feature.place_type.includes('locality') && !city) {
                    city = feature.text;
                  }
                  if (feature.place_type.includes('country') && !country) {
                    country = feature.text;
                    countryCode = feature.properties.short_code?.toUpperCase();
                  }
                }
                
                // Si no encontramos city, buscar en region
                if (!city) {
                  for (const feature of data.features) {
                    if (feature.place_type.includes('region') && !city) {
                      city = feature.text;
                      break;
                    }
                  }
                }
                
                console.debug('[leagend-geo] Respuesta de Mapbox:', { city, country, countryCode });
                
                // Solo actualizar si tenemos información válida
                if (city && country) {
                  // Actualizar UI inmediatamente
                  locationContainer.innerHTML = `Ubicación: ${city}, ${country}`;
                  
                  // Guardar en localStorage para fallback
                  localStorage.setItem('leagend.city', city);
                  localStorage.setItem('leagend.country', country);
                  if (countryCode) {
                    localStorage.setItem('leagend.country_code', countryCode);
                  }
                  
                  // Persistir en backend
                  fetch('/geo/update', {
                    method: 'PATCH',
                    credentials: 'same-origin',
                    headers: {
                      'Content-Type': 'application/json',
                      'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content
                    },
                    body: JSON.stringify({
                      city: city,
                      country: country,
                      country_code: countryCode,
                      latitude: userLat,
                      longitude: userLng
                    })
                  })
                  .then(response => {
                    if (response.ok) {
                      console.debug('[leagend-geo] PATCH completado exitosamente');
                    } else {
                      console.debug('[leagend-geo] PATCH falló con status:', response.status);
                    }
                  })
                  .catch(error => {
                    console.debug('[leagend-geo] Error en PATCH:', error);
                  });
                }
              })
              .catch(error => {
                clearTimeout(timeoutId);
                if (error.name !== 'AbortError') {
                  console.debug('[leagend-geo] Error en reverse geocoding:', error);
                }
              });
            }
          }
        })();
      </script>
  </body>
</html>
