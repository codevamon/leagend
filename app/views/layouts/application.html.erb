<!DOCTYPE html>
<html>
  <head>
    <title><%= content_for(:title) || "Leagend" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <meta name="mapbox-token" content="<%= Rails.application.credentials.dig(:mapbox, :public_token) %>">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%#= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/icon.png" type="image/png">
    <link rel="icon" href="/icon.svg" type="image/svg+xml">
    <link rel="apple-touch-icon" href="/icon.png">

    <%# Includes all stylesheet files in app/assets/stylesheets %>
    <%= stylesheet_link_tag "application", "data-turbo-track": "reload", media: "all" %>
    <%= javascript_importmap_tags %>
    
    <%# Assets de Mapbox - previene duplicados %>
    <%= render 'shared/mapbox_assets' %>

    <%# Variables JavaScript para el usuario logueado %>
    <% if user_signed_in? %>
      <script nonce="<%= content_security_policy_nonce %>">
        window.LEAGEND_USER_SIGNED_IN = true;
        window.LEAGEND_USER_HAS_COUNTRY = <%= current_user.current_country.present? %>;
        window.LEAGEND_USER_HAS_CITY = <%= current_user.current_city.present? %>;
        window.LEAGEND_USER_LAT = <%= current_user.current_latitude.present? ? current_user.current_latitude : 'null' %>;
        window.LEAGEND_USER_LNG = <%= current_user.current_longitude.present? ? current_user.current_longitude : 'null' %>;
      </script>
    <% else %>
      <script nonce="<%= content_security_policy_nonce %>">
        window.LEAGEND_USER_SIGNED_IN = false;
        window.LEAGEND_USER_HAS_COUNTRY = false;
        window.LEAGEND_USER_HAS_CITY = false;
        window.LEAGEND_USER_LAT = null;
        window.LEAGEND_USER_LNG = null;
      </script>
    <% end %>

    <%# CSS de Flatpickr %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    
    <%# CSS de FullCalendar %>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.css">
    <%# JS global de FullCalendar %>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/daygrid.global.min.js" defer></script>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/interaction.global.min.js" defer></script>

    <!--bahamon.dev-->
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
  </head>

  <body data-controller="modal location-display">
    <!-- Bloque de información de ubicación -->
    <div class="location-info-bar" data-location-display-target="display">
      <div class="container-fluid">
        <div class="row">
          <div class="col-12">
            <small class="text-muted">
              <i class="fas fa-map-marker-alt me-1"></i>
              <span id="leagend-header-location"
                    data-country="<%= current_user&.current_country %>"
                    data-city="<%= current_user&.current_city %>"
                    data-lat="<%= current_user&.current_latitude %>"
                    data-lng="<%= current_user&.current_longitude %>">
                <% location = current_user_location %>
                <% if has_location_data?(location) %>
                  Ubicación: <%= format_location_display(location) %>
                <% else %>
                  <em>Detectando ubicación...</em>
                <% end %>
              </span>
              

            </small>
          </div>
        </div>
      </div>
    </div>

    <nav class="navbar navbar-expand-lg bg-body-tertiary">
      <div class="container-fluid">
        <%= link_to 'Leagend', root_path, class: 'navbar-brand' %>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarText">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <%= link_to 'Inicio', root_path, class: 'nav-link' %>
            </li>
            <li class="nav-item">
              <%= link_to 'Clubs', clubs_path, class: 'nav-link' %>
            </li>
            <li class="nav-item">
              <%= link_to 'Clans', clans_path, class: 'nav-link' %>
            </li>
            <li class="nav-item">
              <%= link_to "Discover duels", open_duels_path, class: "nav-link" %>
            </li>
            <li class="nav-item">
              <%= link_to "Arenas", arenas_path, class: "nav-link" %>
            </li>
          </ul>

          <ul class="navbar-nav mb-2 mb-lg-0">
            <% if user_signed_in? %>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <% if current_user.avatar.attached? %>
                    <%= image_tag current_user.avatar, class: "rounded-circle me-2", alt: "Avatar", size: "30x30" %>
                  <% end %>
                  <%= current_user.firstname.presence || current_user.email %>
                </a>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                  <li><%= link_to 'Nuevo evento', when_duels_path, class: 'dropdown-item' %></li>
                  <li><%= link_to "Mis Duelos", my_duels_duels_path, class: "dropdown-item" %></li>
                  <li><%= link_to 'Mi perfil', user_path(current_user), class: 'dropdown-item' %></li>
                  <li><%= link_to 'Notificaciones', notifications_path, class: 'dropdown-item' %></li>
                  <li><hr class="dropdown-divider"></li>
                  <li><%= link_to 'Cerrar sesión', destroy_user_session_path, method: :delete, class: 'dropdown-item text-danger', data: { controller: 'sign-out', action: 'click->sign-out#handleSignOut', 'sign-out-target': 'link' } %></li>
                </ul>
              </li>
            <% else %>
              <li class="nav-item">
                <%= link_to 'Iniciar sesión', new_user_session_path, class: 'nav-link' %>
              </li>
              <li class="nav-item">
                <%= link_to 'Registrarse', new_user_registration_path, class: 'nav-link' %>
              </li>
            <% end %>
          </ul>
        </div>
      </div>
    </nav>


    <p class="notice"><%= notice %></p>
    <p class="alert"><%= alert %></p>
    
    
    <%= yield %>

    <!--bahamon.dev-->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
      <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
      
      <!-- ===== LEAGEND GEO FALLBACK START ===== -->
      <script nonce="<%= content_security_policy_nonce %>">
      // Idempotencia de runtime: evita doble ejecución si el bloque existe dos veces por cache de Turbo
      if (!window.__LEAGEND_GEO_BOOTSTRAPPED__) {
        window.__LEAGEND_GEO_BOOTSTRAPPED__ = true;

        (function(){
          // Guardas: no ejecutar si no existe el span
          var target = document.getElementById('leagend-header-location');
          if (!target) {
            console.log('LEAGEND GEO: Target #leagend-header-location no encontrado');
            return;
          }

          // Variables de sesión expuestas por el layout (si no existen, defínelas)
          if (typeof window.LEAGEND_USER_SIGNED_IN === 'undefined') {
            window.LEAGEND_USER_SIGNED_IN = <%= user_signed_in? %>;
          }
          if (typeof window.LEAGEND_USER_HAS_COUNTRY === 'undefined') {
            window.LEAGEND_USER_HAS_COUNTRY = <%= current_user&.current_country.present? %>;
          }
          if (typeof window.LEAGEND_USER_HAS_CITY === 'undefined') {
            window.LEAGEND_USER_HAS_CITY = <%= current_user&.current_city.present? %>;
          }

          // Logging detallado del estado inicial
          console.log('LEAGEND GEO: Estado inicial:', {
            userSignedIn: window.LEAGEND_USER_SIGNED_IN,
            hasCountry: window.LEAGEND_USER_HAS_COUNTRY,
            hasCity: window.LEAGEND_USER_HAS_CITY,
            backfillDone: sessionStorage.getItem('leagend.backfill_done'),
            bootstrapFlag: window.__LEAGEND_GEO_BOOTSTRAPPED__
          });

          // Si no está logueado, no hacemos nada
          if (!window.LEAGEND_USER_SIGNED_IN) {
            console.log('LEAGEND GEO: Usuario no logueado, saltando geolocalización');
            return;
          }

          // CORRECCIÓN: Solo saltar si tiene AMBOS country Y city, no solo uno
          if (window.LEAGEND_USER_HAS_COUNTRY && window.LEAGEND_USER_HAS_CITY) {
            console.log('LEAGEND GEO: Usuario ya tiene ubicación completa, saltando geolocalización');
            return;
          }

          // CORRECCIÓN: Resetear backfill_done si el usuario no tiene ubicación completa
          if (sessionStorage.getItem('leagend.backfill_done') === '1' && (!window.LEAGEND_USER_HAS_COUNTRY || !window.LEAGEND_USER_HAS_CITY)) {
            console.log('LEAGEND GEO: Resetando backfill_done porque usuario no tiene ubicación completa');
            sessionStorage.removeItem('leagend.backfill_done');
          }

          // Evitar repetir dentro de la sesión del navegador SOLO si ya está completo
          if (sessionStorage.getItem('leagend.backfill_done') === '1') {
            console.log('LEAGEND GEO: Backfill ya completado en esta sesión');
            return;
          }

          function paint(country, city){
            try {
              var text = 'Ubicación: ';
              if (city && country) text += city + ', ' + country;
              else if (country)   text += country;
              else if (city)      text += city;
              else                text += 'Ubicación no configurada';
              target.textContent = text;
              console.log('LEAGEND GEO: Pintado en pantalla:', text);
            } catch(e) {
              console.error('LEAGEND GEO: Error en paint():', e);
            }
          }

          function csrf(){
            var m = document.querySelector('meta[name="csrf-token"]');
            return m && m.content;
          }

          function persist(payload){
            try {
              console.log('LEAGEND GEO: Persistiendo payload:', payload);
              fetch('/geo/update', {
                method: 'PATCH',
                credentials: 'same-origin',
                headers: {
                  'Content-Type': 'application/json',
                  'X-CSRF-Token': csrf() || ''
                },
                body: JSON.stringify(payload)
              }).then(function(response) {
                if (response.ok) {
                  console.log('LEAGEND GEO: Persistencia exitosa');
                  // Actualizar el DOM después de persistir exitosamente
                  updateLocationInDOM(payload);
                } else {
                  console.error('LEAGEND GEO: Error en persistencia:', response.status);
                  return response.json().then(function(data) {
                    console.error('LEAGEND GEO: Detalles del error:', data);
                  });
                }
              }).catch(function(error) {
                console.error('LEAGEND GEO: Error de red en persistencia:', error);
              });
            } catch(e) {
              console.error('LEAGEND GEO: Error en persist():', e);
            }
          }

          // Función para actualizar el DOM después de persistir
          function updateLocationInDOM(payload) {
            try {
              if (payload.country) {
                target.setAttribute('data-country', payload.country);
              }
              if (payload.city) {
                target.setAttribute('data-city', payload.city);
              }
              if (payload.latitude) {
                target.setAttribute('data-lat', payload.latitude);
              }
              if (payload.longitude) {
                target.setAttribute('data-lng', payload.longitude);
              }
              console.log('LEAGEND GEO: DOM actualizado con nuevos valores');
            } catch(e) {
              console.error('LEAGEND GEO: Error actualizando DOM:', e);
            }
          }

          // Función para limpiar localStorage al hacer logout
          function clearLocationStorage() {
            try {
              localStorage.removeItem('leagend.country');
              localStorage.removeItem('leagend.city');
              localStorage.removeItem('leagend.lat');
              localStorage.removeItem('leagend.lng');
              sessionStorage.removeItem('leagend.backfill_done');
              console.log('LEAGEND GEO: Storage limpiado');
            } catch(e) {
              console.error('LEAGEND GEO: Error limpiando storage:', e);
            }
          }

          // Función para forzar reset del flujo
          function forceResetLocationFlow() {
            console.log('LEAGEND GEO: Forzando reset del flujo de geolocalización');
            clearLocationStorage();
            window.__LEAGEND_GEO_BOOTSTRAPPED__ = false;
            // Recargar la página para reiniciar el flujo
            window.location.reload();
          }

          // Exponer funciones globalmente para debugging
          window.LEAGEND_GEO_DEBUG = {
            clearStorage: clearLocationStorage,
            forceReset: forceResetLocationFlow,
            getState: function() {
              return {
                localStorage: {
                  country: localStorage.getItem('leagend.country'),
                  city: localStorage.getItem('leagend.city'),
                  lat: localStorage.getItem('leagend.lat'),
                  lng: localStorage.getItem('leagend.lng')
                },
                sessionStorage: {
                  backfillDone: sessionStorage.getItem('leagend.backfill_done')
                },
                userState: {
                  signedIn: window.LEAGEND_USER_SIGNED_IN,
                  hasCountry: window.LEAGEND_USER_HAS_COUNTRY,
                  hasCity: window.LEAGEND_USER_HAS_CITY
                },
                target: {
                  country: target.getAttribute('data-country'),
                  city: target.getAttribute('data-city'),
                  lat: target.getAttribute('data-lat'),
                  lng: target.getAttribute('data-lng')
                }
              };
            }
          };

          // Logging del estado actual antes de procesar
          var currentCountry = target.getAttribute('data-country');
          var currentCity = target.getAttribute('data-city');
          var currentLat = target.getAttribute('data-lat');
          var currentLng = target.getAttribute('data-lng');
          console.log('LEAGEND GEO: Estado actual del target:', {
            country: currentCountry,
            city: currentCity,
            lat: currentLat,
            lng: currentLng
          });

          // Paso A: usar cache del invitado (localStorage) si existe
          var country = localStorage.getItem('leagend.country');
          var city    = localStorage.getItem('leagend.city');
          var latStr  = localStorage.getItem('leagend.lat');
          var lngStr  = localStorage.getItem('leagend.lng');
          var lat = latStr ? parseFloat(latStr) : null;
          var lng = lngStr ? parseFloat(lngStr) : null;

          console.log('LEAGEND GEO: Cache localStorage:', {
            country: country,
            city: city,
            lat: lat,
            lng: lng
          });

          if (country || city) {
            console.log('LEAGEND GEO: Ejecutando Paso A - Cache localStorage');
            paint(country, city);
            var payload = { country: country || undefined, city: city || undefined };
            if (Number.isFinite(lat) && Number.isFinite(lng)) {
              payload.latitude  = lat;
              payload.longitude = lng;
            }
            persist(payload);
            sessionStorage.setItem('leagend.backfill_done', '1');
            return; // listo
          }

          // Paso B: si hay coords pero no country/city → reverse geocoding
          var mapboxTokenMeta = document.querySelector('meta[name="mapbox-token"]');
          var mapboxToken = mapboxTokenMeta && mapboxTokenMeta.content;
          console.log('LEAGEND GEO: Mapbox token encontrado:', !!mapboxToken);

          function reverseGeocode(lat, lng, retryCount = 0) {
            if (!mapboxToken || !Number.isFinite(lat) || !Number.isFinite(lng)) {
              console.log('LEAGEND GEO: Reverse geocoding falló - token o coords inválidos');
              return Promise.reject();
            }
            
            var url = 'https://api.mapbox.com/geocoding/v5/mapbox.places/' +
                      encodeURIComponent(lng + ',' + lat) +
                      '.json?types=place,region,country&language=es&access_token=' + encodeURIComponent(mapboxToken);

            console.log('LEAGEND GEO: Llamando a Mapbox API (intento ' + (retryCount + 1) + '):', url);

            var ctrl = new AbortController();
            var t = setTimeout(function(){ ctrl.abort(); }, 5000); // Aumentar timeout

            return fetch(url, { signal: ctrl.signal })
              .then(function(r){ 
                clearTimeout(t); 
                if (r.ok) {
                  return r.json();
                } else {
                  console.error('LEAGEND GEO: Error en respuesta de Mapbox:', r.status, r.statusText);
                  return Promise.reject(new Error('HTTP ' + r.status + ': ' + r.statusText));
                }
              })
              .then(function(j){
                if (!j || !j.features || !j.features.length) {
                  console.log('LEAGEND GEO: Sin features en respuesta de Mapbox');
                  return Promise.reject(new Error('Sin features en respuesta'));
                }
                
                console.log('LEAGEND GEO: Features recibidas:', j.features.length);
                var f = j.features;

                // Priorizar place_type=place, luego locality
                var place = f.find(function(x){ return x.place_type && x.place_type.includes('place'); }) ||
                            f.find(function(x){ return x.place_type && x.place_type.includes('locality'); });

                var country = null;
                var city    = null;

                if (place && place.text) {
                  city = place.text;
                  console.log('LEAGEND GEO: Ciudad encontrada:', city);
                }

                // buscar país en el contexto
                var any = place || f[0];
                if (any && any.context) {
                  var c = any.context.find(function(c){ return c.id && c.id.startsWith('country'); });
                  if (c && c.text) {
                    country = c.text;
                    console.log('LEAGEND GEO: País encontrado en contexto:', country);
                  }
                }

                // Si no encontramos país en contexto, buscar directamente
                if (!country) {
                  var directCountry = f.find(function(x){ return x.place_type && x.place_type.includes('country'); });
                  if (directCountry && directCountry.text) {
                    country = directCountry.text;
                    console.log('LEAGEND GEO: País encontrado directamente:', country);
                  }
                }

                if (country || city) {
                  console.log('LEAGEND GEO: Reverse geocoding exitoso:', {country: country, city: city});
                  return {country: country, city: city};
                }
                console.log('LEAGEND GEO: Reverse geocoding falló - sin country ni city');
                return Promise.reject(new Error('Sin country ni city en respuesta'));
              })
              .catch(function(error) {
                console.error('LEAGEND GEO: Error en reverse geocoding (intento ' + (retryCount + 1) + '):', error);
                
                // Retry hasta 2 veces más
                if (retryCount < 2) {
                  console.log('LEAGEND GEO: Reintentando reverse geocoding...');
                  return new Promise(function(resolve, reject) {
                    setTimeout(function() {
                      reverseGeocode(lat, lng, retryCount + 1).then(resolve).catch(reject);
                    }, 1000 * (retryCount + 1)); // Delay incremental
                  });
                }
                
                return Promise.reject(error);
              });
          }

          if (Number.isFinite(lat) && Number.isFinite(lng)) {
            console.log('LEAGEND GEO: Ejecutando Paso B - Reverse geocoding con coords:', lat, lng);
            reverseGeocode(lat, lng).then(function(res){
              paint(res.country, res.city);
              persist({ country: res.country, city: res.city, latitude: lat, longitude: lng });
              localStorage.setItem('leagend.country', res.country || '');
              localStorage.setItem('leagend.city', res.city || '');
              sessionStorage.setItem('leagend.backfill_done', '1');
            }).catch(function(){
              console.log('LEAGEND GEO: Reverse geocoding falló, persistiendo solo coords');
              paint("Ubicación detectada", null);
              persist({ latitude: lat, longitude: lng });
              sessionStorage.setItem('leagend.backfill_done', '1');
            });
            return;
          }

          // Paso C: pedir geolocalización HTML5 si no hay nada aún
          if ('geolocation' in navigator) {
            console.log('LEAGEND GEO: Ejecutando Paso C - Solicitar geolocalización HTML5');
            navigator.geolocation.getCurrentPosition(function(pos){
              var lat = pos && pos.coords && pos.coords.latitude;
              var lng = pos && pos.coords && pos.coords.longitude;
              if (!Number.isFinite(lat) || !Number.isFinite(lng)) {
                console.log('LEAGEND GEO: Coords inválidas de geolocalización');
                return;
              }

              console.log('LEAGEND GEO: Coords obtenidas:', lat, lng);
              localStorage.setItem('leagend.lat', String(lat));
              localStorage.setItem('leagend.lng', String(lng));

              reverseGeocode(lat, lng).then(function(res){
                paint(res.country, res.city);
                persist({ country: res.country, city: res.city, latitude: lat, longitude: lng });
                localStorage.setItem('leagend.country', res.country || '');
                localStorage.setItem('leagend.city', res.city || '');
                sessionStorage.setItem('leagend.backfill_done', '1');
              }).catch(function(){
                console.log('LEAGEND GEO: Reverse geocoding falló después de geolocalización, persistiendo solo coords');
                paint("Ubicación detectada", null);
                persist({ latitude: lat, longitude: lng });
                sessionStorage.setItem('leagend.backfill_done', '1');
              });
            }, function(error){
              console.log('LEAGEND GEO: Usuario rechazó geolocalización o error:', error.message);
              paint("Ubicación no configurada", null);
              sessionStorage.setItem('leagend.backfill_done', '1');
            }, { timeout: 8000 });
          } else {
            console.log('LEAGEND GEO: Geolocalización no soportada por el navegador');
            paint("Ubicación no configurada", null);
            sessionStorage.setItem('leagend.backfill_done', '1');
          }

          // Listener para limpiar storage cuando el usuario haga logout
          document.addEventListener('turbo:before-visit', function(event) {
            // Si va a una página de logout, limpiar storage
            if (event.detail.url && event.detail.url.includes('users/sign_out')) {
              console.log('LEAGEND GEO: Detectado logout, limpiando storage');
              clearLocationStorage();
            }
          });

          // También limpiar en eventos de sign-out específicos
          document.addEventListener('click', function(event) {
            if (event.target && event.target.matches('[data-controller*="sign-out"]')) {
              console.log('LEAGEND GEO: Detectado click en sign-out, limpiando storage');
              clearLocationStorage();
            }
          });
        })();
      }
      </script>
      <!-- ===== LEAGEND GEO FALLBACK END ===== -->
      
  </body>
</html>
